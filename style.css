:root {
  --clr-primary: hsl(229 33% 21%);
  --clr-secondary: #302047;
  --clr-accent: hsl(21deg 85% 60%);

  --wrapper-padding-inline: 1rem;
  --wrapper-max-width: 50rem;

  --section-padding-block: 3rem;
}

body {
  margin: 0;
  font-family: system-ui;
  font-size: 1.125rem;
  line-height: 1.7;
  color: white;
  background-color: var(--clr-primary);
  background-image: linear-gradient(to bottom right, blue, purple, red);
  background-blend-mode: multiply;
}

img {
  max-width: 100%;
  display: block;
}

h1 {
  font-size: clamp(3rem, 10vw, 5rem);
  line-height: 1;
  margin-bottom: 1.5rem;
}

/* For <section> without a .full-width-split-screen class */
section {
  padding-block: var(--section-padding-block);
}

.primary {
  color: white;
  background-color: var(--clr-primary);
}

.secondary {
  color: white;
  background-color: var(--clr-secondary);
}

.accent {
  background-color: var(--clr-accent);
}

.button {
  display: inline-flex;
  padding: 0.75em 1.5em;
  background: var(--clr-accent);
  color: var(--clr-primary);
  text-decoration: none;
  font-weight: 700;
  text-transform: uppercase;
  font-size: 0.875em;
}

.button:hover,
.button:focus {
  background-color: white;
}

.wrapper {
  max-width: var(--wrapper-max-width);
  margin-inline: auto;
  padding-inline: var(--wrapper-padding-inline);
}

/* If a <section> has a .full-width-split-screen class, remove the spacing for padding-block.
   class selector has higher specificity over element selector.
*/
.full-width-split-screen {
  padding-block: 0;
}

/* The <img> component will still stay with teh full width */
.full-width-split-screen > :not(img) {
  padding-block: var(--section-padding-block);
  padding-inline: var(--wrapper-padding-inline);
}

@media (min-width: 600px) {
  .full-width-split-screen {
    display: grid;

    /*grid-template-columns: 1rem 1fr 1fr 1rem;*/

    /* The reason it will be 25rem is that it will match 1/2 of .wrapper's max-width */
    /*grid-template-columns: 1rem minmax(0, 25rem) minmax(0, 25rem) 1rem;*/

    /* Now make the 1st and 4th columns flexible as well. Very smart way of doing this. */
    /*grid-template-columns: minmax(1rem, 1fr) minmax(0, 25rem) minmax(0, 25rem) minmax(*/
    /*    1rem,*/
    /*    1fr*/
    /*  );*/

    /* Now use custom property */
    grid-template-columns:
      minmax(var(--wrapper-padding-inline), 1fr)
      minmax(0, calc(var(--wrapper-max-width) / 2))
      minmax(0, calc(var(--wrapper-max-width) / 2))
      minmax(var(--wrapper-padding-inline), 1fr);

    /* So the '.full-width-split-screen > :not(img)::before' can absolute against with */
    position: relative;
  }

  /* Scenario A: the <img> is the first element. Image occupy the first 2 columns */
  .full-width-split-screen > img:first-child {
    grid-column: 1 / span 2;
  }
  /* Scenario B: the <img> is the last element. Image occupy the last 2 columns */
  .full-width-split-screen > img:last-child {
    grid-column: span 2 / -1;
  }

  .full-width-split-screen > :not(img) {
    /* Use grid rather that align-items in the parent because align-items place the content into the middle rather than stretching the whole height
       And you will see if there is background color for the <div>, it will not work.
    */
    display: grid;
    align-content: center;
    justify-items: start;
  }
  /* Scenario B: the <img> is the last element. The text element occupy the 2nd column */
  .full-width-split-screen > :not(img):first-child {
    grid-column: 2 / span 1;

    padding-left: 0; /* no padding-left if it's in the 2nd column to it can left align with <section> that only got text (wrapped with .wrapper) */
    padding-right: clamp(
      1rem,
      5vw,
      3rem
    ); /* make padding right bigger then the screen size is bigger */
  }
  /* Scenario A: the <img> is the first element. The text element occupy the 3rd column */
  .full-width-split-screen > :not(img):last-child {
    grid-column: 3 / span 1;

    padding-right: 0; /* no padding-right if it's in the 3rd column to it can right align with <section> that only got text (wrapped with .wrapper) */
    padding-left: clamp(
      1rem,
      5vw,
      3rem
    ); /* make padding left bigger then the screen size is bigger */
  }

  .full-width-split-screen > :not(img)::before {
    content: '';
    position: absolute;
    inset: 0;
    background: inherit;
  }
  /* Scenario B: the <img> is the last element. The pseudo element occupy the 1st column */
  .full-width-split-screen > :not(img):first-child::before {
    grid-column: 1 / span 1; /* !!!! Make it occupy the first column */
  }
  /* Scenario A: the <img> is the first element. The pseudo element occupy the 4th column */
  .full-width-split-screen > :not(img):last-child::before {
    grid-column: span 1 / -1; /* !!!! Make it occupy the last column */
  }
}
