:root {
  --clr-primary: hsl(229 33% 21%);
  --clr-secondary: #302047;
  --clr-accent: hsl(21deg 85% 60%);

  --wrapper-padding-inline: 1rem;
  --wrapper-max-width: 50rem;

  --section-padding-block: 3rem;
}

body {
  margin: 0;
  font-family: system-ui;
  font-size: 1.125rem;
  line-height: 1.7;
  color: white;
  background-color: var(--clr-primary);
  background-image: linear-gradient(to bottom right, blue, purple, red);
  background-blend-mode: multiply;
}

img {
  max-width: 100%;
  display: block;
}

h1 {
  font-size: clamp(3rem, 10vw, 5rem);
  line-height: 1;
  margin-bottom: 1.5rem;
}

.primary {
  color: white;
  background-color: var(--clr-primary);
}

.secondary {
  color: white;
  background-color: var(--clr-secondary);
}

.accent {
  background-color: var(--clr-accent);
}

.button {
  display: inline-flex;
  padding: 0.75em 1.5em;
  background: var(--clr-accent);
  color: var(--clr-primary);
  text-decoration: none;
  font-weight: 700;
  text-transform: uppercase;
  font-size: 0.875em;
}

.button:hover,
.button:focus {
  background-color: white;
}

.wrapper {
  max-width: 50rem;
  margin-inline: auto;
  padding-inline: var(--wrapper-padding-inline);
}

/* The <img> component will still stay with teh full width */
.full-width-split-screen > :not(img) {
  padding-inline: var(--wrapper-padding-inline);
}

@media (min-width: 600px) {
  .full-width-split-screen {
    display: grid;

    /*grid-template-columns: 1rem 1fr 1fr 1rem;*/

    /* The reason it will be 25rem is that it will match 1/2 of .wrapper's max-width */
    /*grid-template-columns: 1rem minmax(0, 25rem) minmax(0, 25rem) 1rem;*/

    /* Now make the 1st and 4th columns flexible as well. Very smart way of doing this. */
    grid-template-columns: minmax(1rem, 1fr) minmax(0, 25rem) minmax(0, 25rem) minmax(
        1rem,
        1fr
      );
  }
}
